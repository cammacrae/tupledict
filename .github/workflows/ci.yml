name: build

on: 
  push:
    branches:
      - master
  pull_request:

jobs:
  test:
    strategy:
      fail-fast: true
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry v2
        uses: snok/install-poetry@v1
        with:
          version: "2.0.0"
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Verify Poetry version
        run: poetry --version

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install library
        run: poetry install --no-interaction

      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest tests/

      - name: Run mypy
        run: |
          source .venv/bin/activate
          poetry run mypy src/ tests/

  check-release-note:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            if (!pr) {
              core.setFailed('Not a pull request event.');
              return;
            }
            const files = await github.paginate(
              github.rest.pulls.listFiles,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
              }
            );
            console.log('Files in PR:', files.map(f => `${f.status}: ${f.filename}`));
            const hasReleaseNote = files.some(f =>
              f.status === 'added' && /^releasenotes\/notes\/.*\.md$/.test(f.filename)
            );
            if (!hasReleaseNote) {
              core.setFailed('No new release note file found in releasenotes/notes/');
            }
